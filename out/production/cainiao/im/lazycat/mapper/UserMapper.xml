<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 命名空间一点要加的，它用来唯一标识一个映射文件
     命名空间也可以在config.xml中进行统一的配置
-->
<mapper namespace="im.lazycat.interfaces.UserMapper">

    <select id="selectById" resultType="im.lazycat.entity.SysUser">
        select id, user_name, user_password, user_email, user_info, head_img, create_time
        from sys_user
        where id = #{id}
    </select>

    <select id="selectAll" resultType="im.lazycat.entity.SysUser">
        select id, user_name, user_password, user_email, user_info, head_img, create_time
        from sys_user
    </select>

    <select id="selectRolesByUserId" resultType="im.lazycat.entity.SysRole">
        select r.id, r.role_name roleName, r.enabled, r.create_by createBy, r.create_time createTime
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId}
    </select>

    <!--useGeneratedKeys为true时，mybatis会使用JDBC的getGeneratedKeys方法取出由数据库内部生成的主键，
        获取主键值后将其赋值keyProperty配置的id属性。
    -->
    <insert id="insertUser" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user (id, user_name, user_password, user_email, user_info, head_img, create_time)
        values (#{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
                #{createTime, jdbcType=TIMESTAMP})
    </insert>
    <!--除了useGeneratedKeys,还可以使用selectKey来获取数据生成的主键-->
    <insert id="insertUser2" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user (id, user_name, user_password, user_email, user_info, head_img,
        create_time)
        values (#{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo},
        #{headImg, jdbcType=BLOB},
        #{createTime, jdbcType=TIMESTAMP})
        <selectKey keyColumn="id" keyProperty="id" resultType="long" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>

    <update id="updateUserById">
        update sys_user
        set user_name = #{userName}, user_password = #{userPassword}
        where id = #{id}
    </update>

    <delete id="deleteUserById">
        delete from sys_user where id = #{id}
    </delete>

    <!--动态SQL,if标签的使用
        实现一个高级查询，当只输入用户名时，需要根据用户名去进行模糊查询；当只输入邮箱时，
        根据邮箱进行完全匹配；当两者都输入时，使用这两个条件去查询匹配的用户。
    -->
    <select id="selectUser" resultType="im.lazycat.entity.SysUser">
        select id, user_name, user_password, user_email, user_info, head_img, create_time
        from sys_user
        where 1 = 1
        <if test="userName != null and userName != ''">
            and user_name like concat('%', #{userName}, '%')
        </if>
        <if test="userEmail != null and userEmail != ''">
            and user_email = #{userEmail}
        </if>
    </select>

    <!--id = #{id}这个条件可以避免当userName和userPassword都为空时出现的SQL语法错误
        没有此条件时SQL语句为：update sys_user set where id = #{id}
        同时此条件也避免了当只有一个条件符合时，出现的SQL语法错误(多一个逗号)
        没有此条件时SQL语句为：update sys_user set user_name = #{userName}, where id = #{id}
    -->
    <update id="updateByIdSelective">
        update sys_user
        set
        <if test="userName != null and userName != ''">
            user_name = #{userName},
        </if>
        <if test="userPassword != null and userPassword != ''">
            user_password = #{userPassword},
        </if>
        id = #{id}
        where id = #{id}
    </update>

    <!--动态SQL,choose when otherwise的使用
        使用id查询用户，如果id不为空就使用id查询，
        如果id为空就使用用户名查询，如果用户也为空，就什么也不插
    -->
    <select id="selectUserByIdOrUsername" resultType="im.lazycat.entity.SysUser">
        select id, user_name, user_password, user_email, user_info, head_img, create_time
        from sys_user
        where 1 = 1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>
</mapper>